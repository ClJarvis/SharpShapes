using System;
using System.Drawing;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Systems.Collections.Generic;
using Systems.reflection;


namespace UnitTestShapes
{
    [TestClass]
    public class ShapeTest
    {
        public class ConcreteShape : Shapes.Shape
        {
            public ConcreteShape()
            {
                BorderColor = Color.NavajoWhite;
                FillColor = Color.PapayaWhip;
            }
        }

        [TestMethod]
        public void TestAbstractShapeHasBorderColor()
        {
            ConcreteShape cs = new ConcreteShape();
            Assert.AreEqual(Color.NavajoWhite, cs.BorderColor);
        }

        [TestMethod]
        public void TestAbstractShapeHasFillColor()
        {
            ConcreteShape cs = new ConcreteShape();
            Assert.AreEqual(Color.PapayaWhip, cs.FillColor);
        }
        
        [TestMethod]
        [ExpectedException(typeof(NotImplementedException))]
        public void TestAbstractShapeHasArea()
        {
            ConcreteShape cs = new ConcreteShape();
            cs.Area();
        }

        [TestMethod]
        [ExpectedException(typeof(NotImplementedException))]
        public void TestAbstractShapeHasPerimeter()
        {
            ConcreteShape cs = new ConcreteShape();
            cs.Perimeter();
        }

		[TestMethod]
		public void FindShapes()
		{
		List<string> classes = new List<string> {"Square", "Rectangle", "Shape"};
		CollectionAssert.AreEqual(classes, Assembly.GetAssembly(typeOf(Shapes.Shape)).GetTypes());
		//Assert.AreEqual(typeof(Shapes.Shape), typeof(ConcreteShape));
		}

		[TestMethod]
		public void TestSquareisASubclassOfRectangle()
		{
			Assert.IsTrue(typeof(Shapes.Square).IsSubclassOf(typeof(Shapes.Rectangle)));
		}

		[TestMethod]
		public void TestSquareisASubclassOfQuadrilateral()
		{
			Assert.IsTrue(typeof(Shapes.Square).IsSubclassOf(typeof(Shapes.Rectangle)));
		}
		

    }
}